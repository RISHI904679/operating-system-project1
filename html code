<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dining Philosophers - Sequential Demo</title>
<style>
  body {
    font-family: Arial;
    text-align: center;
    background: #f0f4f8;
  }
  h1 {
    margin-bottom: 10px;
  }
  #table {
    position: relative;
    width: 500px;
    height: 500px;
    margin: auto;
    border-radius: 50%;
    background: #ecf0f1;
  }

  .philosopher {
    position: absolute;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    line-height: 100px;
    font-weight: bold;
    color: white;
    transition: all 0.5s;
    text-align: center;
  }

  /* Position philosophers around the table */
  #p0 { top: -40px; left: 200px; }
  #p1 { top: 100px; right: -40px; }
  #p2 { bottom: 100px; right: -40px; }
  #p3 { bottom: -40px; left: 200px; }
  #p4 { top: 100px; left: -40px; }

  /* Fork positions */
  .fork {
    position: absolute;
    width: 20px;
    height: 80px;
    background: #7f8c8d;
    border-radius: 10px;
    transition: all 0.3s;
  }

  #f0 { top: 60px; left: 300px; transform: rotate(45deg); }
  #f1 { top: 180px; right: 80px; transform: rotate(90deg); }
  #f2 { bottom: 180px; right: 80px; transform: rotate(135deg); }
  #f3 { bottom: 60px; left: 300px; transform: rotate(225deg); }
  #f4 { top: 180px; left: 80px; transform: rotate(-45deg); }

  /* Philosopher States */
  .thinking { background: #3498db; } /* Blue */
  .hungry { background: #f1c40f; } /* Yellow */
  .eating { background: #2ecc71; } /* Green */

  /* Fork States */
  .fork.taken { background: #e74c3c; transform: scale(1.2); } /* Red */

  .controls { margin-top: 20px; }
  button {
    padding: 10px 20px;
    margin: 5px;
    cursor: pointer;
    border: none;
    border-radius: 8px;
    background: #27ae60;
    color: white;
    font-size: 16px;
  }
  #log {
    margin-top: 20px;
    text-align: left;
    max-width: 500px;
    margin: auto;
    background: white;
    padding: 10px;
    border-radius: 8px;
    height: 150px;
    overflow-y: auto;
    font-family: monospace;
  }
</style>
</head>
<body>

<h1>Dining Philosophers - Sequential Demo</h1>

<div id="table">
  <div class="philosopher thinking" id="p0">P0</div>
  <div class="philosopher thinking" id="p1">P1</div>
  <div class="philosopher thinking" id="p2">P2</div>
  <div class="philosopher thinking" id="p3">P3</div>
  <div class="philosopher thinking" id="p4">P4</div>

  <div class="fork" id="f0"></div>
  <div class="fork" id="f1"></div>
  <div class="fork" id="f2"></div>
  <div class="fork" id="f3"></div>
  <div class="fork" id="f4"></div>
</div>

<div class="controls">
  <button onclick="startSimulation()">Start</button>
  <button onclick="stopSimulation()">Stop</button>
</div>

<div id="log"></div>

<script>
const philosophers = document.querySelectorAll('.philosopher');
const forks = [false, false, false, false, false];
let running = false;

function getLeftFork(i) { return i; }
function getRightFork(i) { return (i + 1) % 5; }
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

function logStatus(msg) {
  const log = document.getElementById('log');
  log.innerHTML += msg + '<br>';
  log.scrollTop = log.scrollHeight;
}

function updateForks() {
  forks.forEach((t, i) => {
    const fork = document.getElementById('f' + i);
    t ? fork.classList.add('taken') : fork.classList.remove('taken');
  });
}

async function philosopherActionSequential() {
  while (running) {
    for (let i = 0; i < philosophers.length; i++) {
      if (!running) break;

      const p = philosophers[i];
      const left = getLeftFork(i);
      const right = getRightFork(i);

      // Thinking
      p.className = 'philosopher thinking';
      logStatus(`${p.id} is thinking`);
      await sleep(800);
      if (!running) break;

      // Hungry
      p.className = 'philosopher hungry';
      logStatus(`${p.id} is hungry`);
      await sleep(500);

      // Pick up left fork
      while (forks[left]) {
        logStatus(`${p.id} waiting for left fork`);
        await sleep(300);
      }
      forks[left] = true;
      updateForks();
      logStatus(`${p.id} picked left fork`);

      // Pick up right fork
      while (forks[right]) {
        logStatus(`${p.id} waiting for right fork`);
        await sleep(300);
      }
      forks[right] = true;
      updateForks();
      logStatus(`${p.id} picked right fork`);

      // Eating
      p.className = 'philosopher eating';
      logStatus(`${p.id} is eating`);
      await sleep(1000);

      // Put down forks
      forks[left] = false;
      forks[right] = false;
      updateForks();
      logStatus(`${p.id} put down forks`);

      // Back to thinking
      p.className = 'philosopher thinking';
      logStatus(`${p.id} finished cycle`);
      await sleep(500);
    }
  }
}

function startSimulation() {
  if (running) return;
  running = true;
  logStatus('Simulation started...');
  philosopherActionSequential();
}

function stopSimulation() {
  running = false;
  logStatus('Simulation stopped.');
}
</script>

</body>
</html>
